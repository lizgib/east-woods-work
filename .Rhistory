original <- read.table('~/Documents/FS18/PLB400/Bioinformatics18/project/table2.tsv.NAimputed.txt')
original <- read.table('~/Documents/FS18/PLB400/Bioinformatics18/project/table2.tsv.NAimputed.txt', na.strings = 'NA')
original <- read.table('~/Documents/FS18/PLB400/Bioinformatics18/project/table2.tsv.NAimputed.txt', header = T, sep = '\t')
View(original)
genes <- read.table('~/Documents/FS18/PLB498/even_genes.tsv')
genes <- read.table('~/Documents/FS18/PLB498/even_genes.tsv', header = T, sep = '\t')
View(genes)
View(genes)
newdf <- original[which(original$gene %in% genes$X)]
newdf <- original[which(original$gene %in% genes$X),]
View(newdf)
match(genes$X, original)
match(genes$X, original$gene)
original <- original[order('gene'),]
View(original)
original <- original[order(gene),]
original <- read.table('~/Documents/FS18/PLB400/Bioinformatics18/project/table2.tsv.NAimputed.txt', header = T, sep = '\t')
temp <- original[order('gene'),]
View(temp)
which(original$gene %in% genes$X)
which(genes$X %in% original$gene)
match(genes$X, original$gene)
usethis <- cbind(original$gene, original$fitness, original[, 20:246])
View(usethis)
newdf <- usethis[which(genes$X %in% usethis$`original$gene`),]
newdf <- usethis[which(usethis$`original$gene` %in% genes$X),]
View(genes)
write.table(newdf, 'new_feature_table.tsv', sep = '\t')
newdf <- original[which(genes$X %in% usethis$`original$gene`),]
write.table(newdf, 'new_feature_table.txt', sep = '\t', quote = F)
View(original)
setwd('~/Documents/GitHub/east_woods_work/')
liz_data <- read.csv('data/liz_data.csv')
dat.all <- read.csv('data/dat.all.csv')
table(dat.all$plot)
length(unique(dat.all$plot))
source('~/Documents/GitHub/east_woods_work/scripts/06.cover.R')
# gonna use source for this script because im having problems :(
source('~/Documents/GitHub/east_woods_work/scripts/09.envt_data.R')
source('~/Documents/GitHub/east_woods_work/scripts/06.cover.R')
length(unique(dat.07$plot))
length(unique(dat.07$plot))
dat.07 <- dat.07[which(dat.07$plot %in% liz_data$plots),]
dat.18 <- dat.18[which(dat.18$plot %in% liz_data$plots),]
liz_data <- liz_data[which(liz_data$plots %in% dat.07$plot),] # this shouldnt get rid of anything but im
length(unique(dat.07$plot))
length(unique(dat.18$plot))
liz_data <- liz_data[which(liz_data$plots %in% dat.07$plot),] # this shouldnt get rid of anything but im
length(unique(liz_data$plots))
dat <- dat.07[which(dat.07$datset == 'H'),]
dat <- rbind(dat, dat.07[which(dat.07$datset == 'S'),])
vects <- list(plots = unique(sort(dat$plot)),
sp = unique(sort(dat$species)),
accname = unique(sort(dat$accepted_name)))
vects$accname <- vects$accname[which(!vects$accname %in% c('', ' ', '0'))]
dat.mat <- matrix(0, length(vects$plots), length(vects$accname),
dimnames = list(vects$plots, vects$accname))
for(i in 1:dim(dat)[1]){
if(!dat[i, 'accepted_name'] %in% dimnames(dat.mat)[[2]]) next
dat.mat[dat[i, 'plot'], dat[i, 'accepted_name']] <- 1
}
for(i in 1:dim(dat)[1]){
if(!dat[i, 'accepted_name'] %in% dimnames(dat.mat)[[2]]) next
try(dat.mat[dat[i, 'plot'], dat[i, 'accepted_name']] <- 1)
}
for(i in 1:dim(dat)[1]){
if(!dat[i, 'accepted_name'] %in% dimnames(dat.mat)[[2]]) next
print(paste(dat[i, 'plot'], dat[i, 'accepted_name'], sep = " "))
#dat.mat[dat[i, 'plot'], dat[i, 'accepted_name']] <- 1
}
dat <- dat.07[which(dat.07$datset == 'T'),]
vects <- list(plots = unique(sort(dat$plot)),
sp = unique(sort(dat$species)),
accname = unique(sort(dat$accepted_name)))
vects$accname <- vects$accname[which(!vects$accname %in% c('', ' ', '0'))]
dat.mat <- matrix(0, length(vects$plots), length(vects$accname),
dimnames = list(vects$plots, vects$accname))
for(i in 1:dim(dat)[1]){
if(!dat[i, 'accepted_name'] %in% dimnames(dat.mat)[[2]]) next
dat.mat[dat[i, 'plot'], dat[i, 'accepted_name']] <- 1
}
colnames(dat.mat) <- gsub('[-, ]', '_', colnames(dat.mat))
names_in_tree <- intersect(tr.ewv4$tip.label, colnames(dat.mat))
dat.mat.trees.07 <- dat.mat[,which(colnames(dat.mat) %in% names_in_tree)]
dat <- dat.07
vects <- list(plots = unique(sort(dat$plot)),
sp = unique(sort(dat$species)),
accname = unique(sort(dat$accepted_name)))
vects$accname <- vects$accname[which(!vects$accname %in% c('', ' ', '0'))]
dat.mat <- matrix(0, length(vects$plots), length(vects$accname),
dimnames = list(vects$plots, vects$accname))
for(i in 1:dim(dat)[1]){
if(!dat[i, 'accepted_name'] %in% dimnames(dat.mat)[[2]]) next
dat.mat[dat[i, 'plot'], dat[i, 'accepted_name']] <- 1
}
colnames(dat.mat) <- gsub('[-, ]', '_', colnames(dat.mat))
names_in_tree <- intersect(tr.ewv4$tip.label, colnames(dat.mat))
dat.mat.all.07 <- dat.mat[,which(colnames(dat.mat) %in% names_in_tree)]
dat <- dat.18[which(dat.18$datset == 'H'),]
dat <- rbind(dat, dat.18[which(dat.18$datset == 'S'),])
vects <- list(plots = unique(sort(dat$plot)),
sp = unique(sort(dat$species)),
accname = unique(sort(dat$accepted_name)))
vects$accname <- vects$accname[which(!vects$accname %in% c('', ' ', '0'))]
dat.mat <- matrix(0, length(vects$plots), length(vects$accname),
dimnames = list(vects$plots, vects$accname))
for(i in 1:dim(dat)[1]){
if(!dat[i, 'accepted_name'] %in% dimnames(dat.mat)[[2]]) next
dat.mat[dat[i, 'plot'], dat[i, 'accepted_name']] <- 1
}
View(dat.mat)
dat <- dat.07[which(dat.07$datset == 'H'),]
dat <- rbind(dat, dat.07[which(dat.07$datset == 'S'),])
vects <- list(plots = unique(sort(dat$plot)),
sp = unique(sort(dat$species)),
accname = unique(sort(dat$accepted_name)))
vects$accname <- vects$accname[which(!vects$accname %in% c('', ' ', '0'))]
dat.mat <- matrix(0, length(vects$plots), length(vects$accname),
dimnames = list(vects$plots, vects$accname))
for(i in 1:dim(dat)[1]){
if(!dat[i, 'accepted_name'] %in% dimnames(dat.mat)[[2]]) next
if (dat[i, 'plot'] %in% row.names(dat.mat)){
dat.mat[dat[i, 'plot'], dat[i, 'accepted_name']] <- 1
}
#dat.mat[dat[i, 'plot'], dat[i, 'accepted_name']] <- 1
}
View(dat)
for(i in 1:dim(dat)[1]){
if(!dat[i, 'accepted_name'] %in% dimnames(dat.mat)[[2]]) next
if (dat[i, 'plot'] %in% row.names(dat.mat)){
if (dat[i, 'accepted_name'] %in% colnames(dat.mat)){
dat.mat[dat[i, 'plot'], dat[i, 'accepted_name']] <- 1
}
}
#dat.mat[dat[i, 'plot'], dat[i, 'accepted_name']] <- 1
}
for(i in 1:dim(dat)[1]){
if(!dat[i, 'accepted_name'] %in% dimnames(dat.mat)[[2]]) next
if (dat[i, 'plot'] %in% row.names(dat.mat)){
if (dat[i, 'accepted_name'] %in% colnames(dat.mat)){
print(dat.mat[dat[i, 'plot'], dat[i, 'accepted_name']])
}
}
#dat.mat[dat[i, 'plot'], dat[i, 'accepted_name']] <- 1
}
dat.mat <- matrix(0, length(vects$plots), length(vects$accname),
dimnames = list(vects$plots, vects$accname))
for(i in 1:dim(dat)[1]){
if(!dat[i, 'accepted_name'] %in% dimnames(dat.mat)[[2]]) next
if (dat[i, 'plot'] %in% row.names(dat.mat)){
if (dat[i, 'accepted_name'] %in% colnames(dat.mat)){
print(dat.mat[dat[i, 'plot'], dat[i, 'accepted_name']])
}
}
#dat.mat[dat[i, 'plot'], dat[i, 'accepted_name']] <- 1
}
for(i in 1:dim(dat)[1]){
if(!dat[i, 'species'] %in% dimnames(dat.mat)[[2]]) next
if (dat[i, 'plot'] %in% row.names(dat.mat)){
if (dat[i, 'species'] %in% colnames(dat.mat)){
print(dat.mat[dat[i, 'plot'], dat[i, 'species']])
}
}
#dat.mat[dat[i, 'plot'], dat[i, 'accepted_name']] <- 1
}
# gonna use source for this script because im having problems :(
source('~/Documents/GitHub/east_woods_work/scripts/09.envt_data.R')
source('~/Documents/GitHub/east_woods_work/scripts/06.cover.R')
library(ape)
#source('~/Documents/morton arb/east_woods_phylogeny/SCRIPTS/17.tree_generation.R')
# probably want to just read in the tree instead of sourcing it every time
tr.ewv4 <- read.tree('~/Documents/GitHub/east_woods_work/outputs/tr.ewv4')
dat <- dat.07[which(dat.07$datset == 'H'),]
dat <- rbind(dat, dat.07[which(dat.07$datset == 'S'),])
vects <- list(plots = unique(sort(dat$plot)),
sp = unique(sort(dat$species)),
accname = unique(sort(dat$accepted_name)))
vects$accname <- vects$accname[which(!vects$accname %in% c('', ' ', '0'))]
dat.mat <- matrix(0, length(vects$plots), length(vects$sp),
dimnames = list(vects$plots, vects$sp))
for(i in 1:dim(dat)[1]){
if(!dat[i, 'species'] %in% dimnames(dat.mat)[[2]]) next
dat.mat[dat[i, 'plot'], dat[i, 'accepted_name']] <- 1
}
# gonna use source for this script because im having problems :(
source('~/Documents/GitHub/east_woods_work/scripts/09.envt_data.R')
source('~/Documents/GitHub/east_woods_work/scripts/06.cover.R')
library(ape)
#source('~/Documents/morton arb/east_woods_phylogeny/SCRIPTS/17.tree_generation.R')
# probably want to just read in the tree instead of sourcing it every time
tr.ewv4 <- read.tree('~/Documents/GitHub/east_woods_work/outputs/tr.ewv4')
dat <- dat.07[which(dat.07$datset == 'H'),]
dat <- rbind(dat, dat.07[which(dat.07$datset == 'S'),])
vects <- list(plots = unique(sort(dat$plot)),
sp = unique(sort(dat$species)),
accname = unique(sort(dat$accepted_name)))
vects$accname <- vects$accname[which(!vects$accname %in% c('', ' ', '0'))]
dat.mat <- matrix(0, length(vects$plots), length(vects$accname),
dimnames = list(vects$plots, vects$accname))
for(i in 1:dim(dat)[1]){
if(!dat[i, 'accepted_name'] %in% dimnames(dat.mat)[[2]]) next
dat.mat[dat[i, 'plot'], dat[i, 'accepted_name']] <- 1
}
dimnames(dat.mat)[[2]]
dat[i, 'accepted_name']
library(reshape2)
site.sp.quad <- cast(dat.07, plot ~ accepted_name, value='cover', FUN=mean)
site.sp.quad <- acast(dat.07, plot ~ accepted_name, value='cover', FUN=mean)
site.sp.quad <- acast(dat.07, plot ~ accepted_name, value='cover')
site.sp.quad <- acast(dat.07, plot ~ accepted_name, value='cover', fill = 0, drop = FALSE)
library(vegan)
mat <- dat.07[c('plot', 'accepted_name')]
View(mat)
table(mat)
temp <- as.matrix(table(mat))
View(temp)
mat <- as.matrix(dat.07[c('plot', 'accepted_name')])
# gonna use source for this script because im having problems :(
source('~/Documents/GitHub/east_woods_work/scripts/09.envt_data.R')
source('~/Documents/GitHub/east_woods_work/scripts/06.cover.R')
library(ape)
library(reshape2)
library(vegan)
#source('~/Documents/morton arb/east_woods_phylogeny/SCRIPTS/17.tree_generation.R')
# probably want to just read in the tree instead of sourcing it every time
tr.ewv4 <- read.tree('~/Documents/GitHub/east_woods_work/outputs/tr.ewv4')
dat.mat <- matrix(0, length(unique(dat.07$plots)), length(unique(dat.07$accepted)),
dimnames = list(unique(dat.07$plots), unique(dat.07$accepted_name)))
View(dat.mat)
dat.mat <- matrix(0, length(unique(dat.07$plots)), length(unique(dat.07$accepted)),
dimnames = list(unique(dat.07$plots), unique(dat.07$accepted_name)))
dat.mat <- matrix(0, length(unique(dat.07$plot)), length(unique(dat.07$accepted)),
dimnames = list(unique(dat.07$plots), unique(dat.07$accepted_name)))
View(dat.mat)
for(i in 1:dim(dat.mat)[1]){
for(j in 1:dim(dat.mat)[2]){
print(dat.mat[i,j])
}
}
for(i in 1:dim(dat.mat)[1]){
print(i)
for(j in 1:dim(dat.mat)[2]){
print(j)
}
}
for(i in 1:dim(dat.mat)[1]){
print(paste('i',i))
for(j in 1:dim(dat.mat)[2]){
print(paste('j',j))
}
}
for(i in 1:dim(dat.07)[1]){
for(j in 1:dim(dat.07)[2]){
print(i,j)
}
}
for(i in 1:dim(dat.07)[1]){
for(j in 1:dim(dat.07)[2]){
print(dat[i,'accepted_name'])
}
}
for(i in 1:dim(dat.07)[1]){
for(j in 1:dim(dat.07)[2]){
print(dat.07[i,'accepted_name'])
}
}
dat <- dat.07[which(dat.07$datset == 'H'),]
dat <- rbind(dat, dat.07[which(dat.07$datset == 'S'),])
vects <- list(plots = unique(sort(dat$plot)),
sp = unique(sort(dat$species)),
accname = unique(sort(dat$accepted_name)))
vects$accname <- vects$accname[which(!vects$accname %in% c('', ' ', '0'))]
dat.mat <- matrix(0, length(vects$plots), length(vects$accname),
dimnames = list(vects$plots, vects$accname))
for(i in 1:dim(dat)[1]){
if(!dat[i, 'accepted_name'] %in% dimnames(dat.mat)[[2]]) next
dat.mat[dat$plot[i], dat$accepted_name[i]] <- 1
}
for(sp in dat.07$accepted_name){
for(plt in dat.07$plot){
if(sp %in% dat.07$accepted_name[which(dat.07$plot == plt)]) print('do i wannaknow if this work')
}
}
for(sp in dat.07$accepted_name){
for(plt in dat.07$plot){
if(sp %in% dat.07$accepted_name[which(dat.07$plot == plt)]) {
print(sp)
print(plt)
}
}
}
for(sp in dat.07$accepted_name){
for(plt in dat.07$plot){
if(sp %in% dat.07$accepted_name[which(dat.07$plot == plt)]) {
dat.mat[plt, sp] <- 1
}
}
}
for(sp in unique(dat.07$accepted_name)){
for(plt in dat.07$plot){
if(sp %in% dat.07$accepted_name[which(dat.07$plot == plt)]) {
dat.mat[plt, sp] <- 1
}
}
}
for(sp in unique(dat.07$accepted_name)){
for(plt in unique(dat.07$plot)){
if(sp %in% dat.07$accepted_name[which(dat.07$plot == plt)]) {
dat.mat[plt, sp] <- 1
}
}
}
for(sp in unique(dat.07$accepted_name)){
for(plt in unique(dat.07$plot)){
if(sp %in% dat.07$accepted_name[which(dat.07$plot == plt)]) {
print(dat.mat[plt, sp])
}
}
}
dat.mat <- matrix(0, length(unique(dat.07$plot)), length(unique(dat.07$accepted)),
dimnames = list(unique(dat.07$plots), unique(dat.07$accepted_name)))
for(sp in unique(dat.07$accepted_name)){
for(plt in unique(dat.07$plot)){
if(sp %in% dat.07$accepted_name[which(dat.07$plot == plt)]) {
print(dat.mat[plt, sp])
}
}
}
for(sp in unique(dat.07$accepted_name)){
for(plt in unique(dat.07$plot)){
ifelse(sp %in% dat.07$accepted_name[which(dat.07$plot == plt)],
dat.mat[plt, sp] <- 1,
dat.mat[plt, sp] <- 0)
}
}
dat.mat <- matrix(0, length(unique(dat.07$plot)), length(unique(dat.07$accepted)),
dimnames = list(unique(dat.07$plots), unique(dat.07$accepted_name)))
for(sp in unique(dat.07$accepted_name)){
for(plt in unique(dat.07$plot)){
ifelse(sp %in% dat.07$accepted_name[which(dat.07$plot == plt)],
dat.mat[plt, sp] <- 1,
dat.mat[plt, sp] <- 0)
}
}
table(dat.07$accepted_name)
for(sp in unique(dat.07$accepted_name)){
for(plt in unique(dat.07$plot)){
if(sp %in% dat.07$accepted_name[which(dat.07$plot == plt)]){
dat.mat[plt, sp] <- 1
print(paste(plt, sp))
}
}
}
for(sp in unique(dat.07$accepted_name)){
print(sp)
for(plt in unique(dat.07$plot)){
print(plt)
if(sp %in% dat.07$accepted_name[which(dat.07$plot == plt)]){
dat.mat[plt, sp] <- 1
}
}
}
for(sp in unique(dat.07$accepted_name)){
print(sp)
for(plt in unique(dat.07$plot)){
print(plt)
if(sp %in% dat.07$accepted_name[which(dat.07$plot == plt)]){
print(dat.mat[plt, sp])
}
}
}
source('~/Documents/GitHub/east_woods_work/scripts/01.combine_spp_pools.R')
source('~/Documents/GitHub/east_woods_work/scripts/02.falltranslationkey.R')
source('~/Documents/GitHub/east_woods_work/scripts/02.falltranslationkey.R')
source('~/Documents/GitHub/east_woods_work/scripts/04.natives.R')
source('~/Documents/GitHub/east_woods_work/scripts/06.cover.R')
source('~/Documents/GitHub/east_woods_work/scripts/08.community_data_matrices.pres_abs.R')
setwd('~/Documents/GitHub/east_woods_work/')
# gonna use source for this script because im having problems :(
source('~/Documents/GitHub/east_woods_work/scripts/09.envt_data.R')
source('~/Documents/GitHub/east_woods_work/scripts/06.cover.R')
library(ape)
library(reshape2)
library(vegan)
#source('~/Documents/morton arb/east_woods_phylogeny/SCRIPTS/17.tree_generation.R')
# probably want to just read in the tree instead of sourcing it every time
tr.ewv4 <- read.tree('~/Documents/GitHub/east_woods_work/outputs/tr.ewv4')
dat <- dat.07[which(dat.07$datset == 'H'),]
dat <- rbind(dat, dat.07[which(dat.07$datset == 'S'),])
vects <- list(plots = unique(sort(dat$plot)),
sp = unique(sort(dat$species)),
accname = unique(sort(dat$accepted_name)))
vects$accname <- vects$accname[which(!vects$accname %in% c('', ' ', '0'))]
dat.mat <- matrix(0, length(vects$plots), length(vects$accname),
dimnames = list(vects$plots, vects$accname))
for(i in 1:dim(dat)[1]){
if(!dat[i, 'accepted_name'] %in% dimnames(dat.mat)[[2]]) next
dat.mat[dat$plot[i], dat$accepted_name[i]] <- 1
}
View(dat.07)
table(dat.07$plot)
length(unique(dat.07$plot))
length(unique(dat.18$plot))
table(dat.18$plot)
temp <- as.data.frame(table(dat.07$plot))
View(temp)
source('~/Documents/GitHub/east_woods_work/scripts/01.combine_spp_pools.R')
source('~/Documents/GitHub/east_woods_work/scripts/02.falltranslationkey.R')
source('~/Documents/GitHub/east_woods_work/scripts/04.natives.R')
source('~/Documents/GitHub/east_woods_work/scripts/06.cover.R')
source('~/Documents/GitHub/east_woods_work/scripts/08.community_data_matrices.pres_abs.R')
setwd('~/Documents/GitHub/east_woods_work/')
# gonna use source for this script because im having problems :(
source('~/Documents/GitHub/east_woods_work/scripts/09.envt_data.R')
source('~/Documents/GitHub/east_woods_work/scripts/06.cover.R')
library(ape)
library(reshape2)
library(vegan)
#source('~/Documents/morton arb/east_woods_phylogeny/SCRIPTS/17.tree_generation.R')
# probably want to just read in the tree instead of sourcing it every time
tr.ewv4 <- read.tree('~/Documents/GitHub/east_woods_work/outputs/tr.ewv4')
dat <- dat.07[which(dat.07$datset == 'H'),]
dat <- rbind(dat, dat.07[which(dat.07$datset == 'S'),])
vects <- list(plots = unique(sort(dat$plot)),
sp = unique(sort(dat$species)),
accname = unique(sort(dat$accepted_name)))
vects$accname <- vects$accname[which(!vects$accname %in% c('', ' ', '0'))]
dat.mat <- matrix(0, length(vects$plots), length(vects$accname),
dimnames = list(vects$plots, vects$accname))
for(i in 1:dim(dat)[1]){
if(!dat[i, 'accepted_name'] %in% dimnames(dat.mat)[[2]]) next
dat.mat[dat$plot[i], dat$accepted_name[i]] <- 1
}
View(dat)
for(i in 1:dim(dat)[1]){
if(!dat[i, 'accepted_name'] %in% dimnames(dat.mat)[[2]]) next
dat.mat[dat[i, 'plot'], dat[i, 'accepted_name']] <- 1
}
# dat <- dat.07[which(dat.07$datset == 'H'),]
# dat <- rbind(dat, dat.07[which(dat.07$datset == 'S'),])
dat <- read.csv('data/understory.all.csv')
dat <- dat[which(dat$year == '2007'),]
vects <- list(plots = unique(sort(dat$plot)),
sp = unique(sort(dat$species)),
accname = unique(sort(dat$accepted_name)))
vects$accname <- vects$accname[which(!vects$accname %in% c('', ' ', '0'))]
dat.mat <- matrix(0, length(vects$plots), length(vects$accname),
dimnames = list(vects$plots, vects$accname))
for(i in 1:dim(dat)[1]){
if(!dat[i, 'accepted_name'] %in% dimnames(dat.mat)[[2]]) next
dat.mat[dat[i, 'plot'], dat[i, 'accepted_name']] <- 1
}
for(i in 1:dim(dat)[1]){
if(!dat[i, 'accepted_name'] %in% dimnames(dat.mat)[[2]]) next
print(dat.mat[dat[i, 'plot'], dat[i, 'accepted_name']])
}
dat.mat <- matrix(0, length(vects$plots), length(vects$accname),
dimnames = list(vects$plots, vects$accname))
for(i in 1:dim(dat)[1]){
if(!dat[i, 'accepted_name'] %in% dimnames(dat.mat)[[2]]) next
print(dat.mat[dat[i, 'plot'], dat[i, 'accepted_name']])
}
for(i in 1:dim(dat)[1]){
if(!dat[i, 'accepted_name'] %in% dimnames(dat.mat)[[2]]) next
print(dat.mat[dat[i, 'plot'], dat[i, 'accepted_name']])
print(dat.mat[i, 'plot'])
}
for(i in 1:dim(dat)[1]){
if(!dat[i, 'accepted_name'] %in% dimnames(dat.mat)[[2]]) next
print(dat.mat[dat[i, 'plot'], dat[i, 'accepted_name']])
print(dat.mat[i, 'accepted_name'])
}
table(dat.all$plot)
length(unique(dat.all$plot))
table(dat.07$plot)
length(unique(dat.07$plot))
