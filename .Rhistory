covers <- avg_bt_dup(dat.07, plot, dup)
}
for(p in unique(dat.07$plot)){
dup <- duplicates(dat.07, p) # list of the duplicate spp for that plot
covers <- avg_bt_dup(dat.07, plot, dup)
print(covers)
}
test <- dat.07[1:10,]
for(p in unique(test$plot)){
dup <- duplicates(test, p) # list of the duplicate spp for that plot
covers <- avg_bt_dup(test, plot, dup)
print(covers)
}
temp <- dat.07[1:10,]
for(p in unique(temp$plot)){
dup <- duplicates(temp, p) # list of the duplicate spp for that plot
covers <- avg_bt_dup(test, plot, dup)
print(covers)
}
View(test)
temp <- dat.07[1:25,]
for(p in unique(temp$plot)){
dup <- duplicates(temp, p) # list of the duplicate spp for that plot
covers <- avg_bt_dup(test, plot, dup)
print(covers)
}
View(temp)
temp <- dat.07[1:40,]
for(p in unique(temp$plot)){
dup <- duplicates(temp, p) # list of the duplicate spp for that plot
covers <- avg_bt_dup(test, plot, dup)
print(covers)
}
point_info_GIS <- read.csv('~/Documents/GitHub/east_woods_work/data/plot_data/Analyses_Rollinson/point_info_GIS.csv', as.is = T)
point_info_GIS$PlotID <- gsub('-', '', point_info_GIS$PlotID)
plots <- point_info_GIS$PlotID
liz_data <- data.frame(sort(plots))
names(liz_data) <- c('plots')
######################
# LATITUDE/LONGITUDE
######################
liz_data$lat <- point_info_GIS$lat[match(liz_data$plots,point_info_GIS$PlotID)]
liz_data$lon <- point_info_GIS$lon[match(liz_data$plots,point_info_GIS$PlotID)]
###########################
# SLOPE, ASPECT, ELEVATION
###########################
liz_data$elevation <- point_info_GIS$elev[match(liz_data$plots,point_info_GIS$PlotID)]
liz_data$slope <- point_info_GIS$slope[match(liz_data$plots,point_info_GIS$PlotID)]
liz_data$aspect <- point_info_GIS$aspect[match(liz_data$plots,point_info_GIS$PlotID)]
##################
# BURN FREQUENCY
##################
burn_data <- read.csv('~/Documents/GitHub/east_woods_work/data/plot_data/Analyses_Rollinson/point_info_GIS_burnhistory_2017-12.csv', as.is = T)
burned_plots <- burn_data$PlotID[which(!is.na(burn_data$Burn_Date))]
burned_plots <- gsub('-', '', burned_plots)
burned_plots <- as.data.frame(sort(table(burned_plots)))
liz_data$burn_count <- burned_plots$Freq[match(liz_data$plots, burned_plots$burned_plots)]
# get the plot_tree_cover for 2007 plots
plot_tree_cover_07 <- data.frame(trees07$plot)
plot_tree_cover_07$plot_tree_cover <- trees07$plot_tree_cover
plot_tree_cover_07 <- unique(plot_tree_cover_07)
liz_data$canopy_07 <- plot_tree_cover_07$plot_tree_cover[match(liz_data$plots, plot_tree_cover_07$trees07.plot)]
# get the plot_tree_cover for 2018 plots
plot_tree_cover_18 <- data.frame(trees18$plot)
plot_tree_cover_18$plot_tree_cover <- trees18$plot_tree_cover
plot_tree_cover_18 <- unique(plot_tree_cover_18)
source('~/Documents/GitHub/east_woods_work/scripts/04.natives.R')
dat.all <- read.csv('data/dat.all.csv')
dat.all$cover <- as.numeric(dat.all$cover)
dat.07 <- dat.all[which(dat.all$year == '2007'),]
dat.18 <- dat.all[which(dat.all$year == '2018'),]
herbs07 <- dat.07[which(dat.07$datset == 'H'),]
herbs18 <- dat.18[which(dat.18$datset == 'H'),]
shrubs07 <- dat.07[which(dat.07$datset == 'S'),]
shrubs18 <- dat.18[which(dat.18$datset == 'S'),]
trees07 <- dat.07[which(dat.07$datset == 'T'),]
trees18 <- dat.18[which(dat.18$datset == 'T'),]
invasives07 <- dat.07[which(dat.07$nativestatus == 'i'),]
invasives07 <- rbind(invasives07, dat.07[which(dat.07$nativestatus == 'e'),])
View(invasives07)
View(dat.all)
table(dat.all$nativestatus)
invasives07 <- rbind(invasives07, dat.07[which(dat.07$nativestatus == 'x'),])
invasives18 <- dat.18[which(dat.18$nativestatus == 'i'),]
invasives18 <- rbind(invasives18, dat.18[which(dat.18$nativestatus == 'x'),])
View(invasives07)
source('~/Documents/GitHub/east_woods_work/scripts/06.cover.R')
source('~/Documents/GitHub/east_woods_work/scripts/09.envt_data.R')
liz_data$invasives07 <- invasives07[match(liz_data$plots, invasives07$plot)]
liz_data$invasives07 <- invasives07$cover[match(liz_data$plots, invasives07$plot)]
liz_data$invasives18 <- invasives18$cover[match(liz_data$plots, invasives18$plot)]
##################
# SOIL DATA
##################
soil_data <- read.csv('~/Documents/GitHub/east_woods_work/data/plot_data/Analyses_Rollinson/point_info_GIS_soils.csv', as.is = T)
soil_data$PlotID <- gsub('-', '', soil_data$PlotID)
soil_data <- soil_data[match(liz_data$plots, soil_data$PlotID),]
liz_data$soil_texture <- soil_data$texture
liz_data$drainage <- soil_data$Drainage
marlin_data <- read.csv('~/Documents/GitHub/east_woods_work/data/plot_data/marlins_data.csv', as.is = T)
marlin_data$Plot <- gsub('-', '', marlin_data$Plot)
marlin_data <- marlin_data[match(liz_data$plots, marlin_data$Plot),]
liz_data$tree_group <- marlin_data$Grp
trees07$genus <- gsub(' .*', '', trees07$accepted_name)
# go through each plot in liz_data
# for all the trees in each plot, which has the max BA
tree_type_plots_07 <- data.frame()
for (plt in unique(trees07$plot)){
dom <- max(trees07$percent_total_cover[which(trees07$plot == plt)])
tree_type <- unique(trees07$genus[which(trees07$percent_total_cover == dom)])
temp <- data.frame(plt, tree_type)
tree_type_plots_07 <- rbind(tree_type_plots_07, temp)
}
liz_data$tree_group_07 <- tree_type_plots_07$tree_type[match(liz_data$plots, tree_type_plots_07$plt)]
trees18$genus <- gsub(' .*', '', trees18$accepted_name)
tree_type_plots_18 <- data.frame()
for (plt in unique(trees18$plot)){
dom <- max(trees18$percent_total_cover[which(trees18$plot == plt)])
tree_type <- unique(trees18$genus[which(trees18$percent_total_cover == dom)])
temp <- data.frame(plt, tree_type)
tree_type_plots_18 <- rbind(tree_type_plots_18, temp)
}
liz_data$tree_group_18 <- tree_type_plots_18$tree_type[match(liz_data$plots, tree_type_plots_18$plt)]
####################
# SOME OTHER STUFF
###################
liz_data$area_name <- point_info_GIS$AreaName
liz_data$com_class <- point_info_GIS$ComClass
liz_data$soil_index <- 0 # blank for now. this will be continuous translation of the soil variables
liz_data$geo_drainage <- 0 # also will be continous coding of some soil variables and combination of slope aspect and elevation
liz_data$ECM_ACM <- 0 # continuous, percent of trees which are ACM or ECM
length(unique(liz_data$plots))
liz_data <- liz_data[which(liz_data$plots %in% unique(dat.all$plot)),]
length(unique(liz_data$plots))
liz_data$plots == dat.all$plot
liz_data$plots == sort(unique(dat.all$plot))
source('~/Documents/GitHub/east_woods_work/scripts/08.community_data_matrices.pres_abs.R')
liz_data$soil_texture <- gsub('silt loam', 1, liz_data$soil_texture)
liz_data$soil_texture <- gsub('silt clay loam', 2, liz_data$soil_texture)
View(liz_data)
table(liz_data$ois)
table(liz_data$soil_texture)
liz_data$soil_texture <- gsub('silt loam', 1, liz_data$soil_texture)
liz_data$soil_texture <- gsub('silty clay loam', 2, liz_data$soil_texture)
table(liz_data$soil_texture)
table(liz_data$drainage)
liz_data$drainage <- gsub('very poorly drained', 1, liz_data$drainage)
liz_data$drainage <- gsub('poorly drained', 2, liz_data$drainage)
liz_data$drainage <- gsub('moderately well-drained', 3, liz_data$drainage)
liz_data$drainage <- gsub('well-drained', 4, liz_data$drainage)
liz_data$drainage <- gsub('excellently drained', 5, liz_data$drainage)
####################
# SOME OTHER STUFF
###################
liz_data$area_name <- point_info_GIS$AreaName
liz_data$com_class <- point_info_GIS$ComClass
liz_data$soil_index <- 0 # blank for now. this will be continuous translation of the soil variables
liz_data$geo_drainage <- 0 # also will be continous coding of some soil variables and combination of slope aspect and elevation
liz_data$ECM_ACM <- 0 # continuous, percent of trees which are ACM or ECM
# ^^^ not working rn 11/30 but I dont have time to fix it right now
liz_data$soil_index <- liz_data$soil_texture * liz_data$drainage
liz_data$drainage <- as.numeric(liz_data$drainage)
liz_data$soil_texture <- as.numeric(liz_data$soil_texture)
# ^^^ not working rn 11/30 but I dont have time to fix it right now
liz_data$soil_index <- liz_data$soil_texture * liz_data$drainage
table(liz_data$soil_index)
# PHYLOGENETIC DIVERSITY OF EACH PLOT
tr.ewv4 <- read.tree('~/Documents/GitHub/east_woods_work/outputs/tr.ewv4')
source('~/Documents/GitHub/east_woods_work/scripts/08.community_data_matrices.pres_abs.R')
source('~/Documents/GitHub/east_woods_work/scripts/02.falltranslationkey.R')
source('~/Documents/GitHub/east_woods_work/scripts/09.envt_data.R')
source('~/Documents/GitHub/east_woods_work/scripts/01.combine_spp_pools.R')
write.csv(dat.all, '../../outputs/dat.all.csv')
#MAKE NEW TNRS TRANSLATION KEY TO SEND TO DR. HIPP
# using the same method as in the summer, take the species list from 2007 + 2018 pool
# and sumbit to TNRS for cleaned names list
# OUTPUT: fall_translation_key.csv, 2007_spp_pool.csv, 2018_spp_pool.csv,
# 2007_2018_spp_pool.csv (will just append a column with accepted name to spp pool)
setwd('~/Documents/GitHub/east_woods_work/')
dat.all <- read.csv('outputs/dat.all.csv')
write.csv(dat.all, '../data/dat.all.csv')
dat.all.sorted <- sapply(dat.all$species, function(x) x) %>%
unlist %>%
trimws %>%
unique %>%
sort
library(magrittr)
dat.all.sorted <- data.frame(dat.all.sorted)
write.csv(dat.all.sorted, '../../outputs/complete_spp_list.csv')
write.csv(dat.all.sorted, 'outputs/complete_spp_list.csv')
tnrs_all <- data.frame(read.csv('../../outputs/complete_tnrs_list.csv', as.is = T))
tnrs_all <- data.frame(read.csv('outputs/complete_tnrs_list.csv', as.is = T))
dat.all$accepted_name <- tnrs_all$Accepted_name[match(dat.all$species, tnrs_all$Name_submitted)]
dat.07$accepted_name <- tnrs_all$Accepted_name[match(dat.07$species, tnrs_all$Name_submitted)]
dat.18$accepted_name <- tnrs_all$Accepted_name[match(dat.18$species, tnrs_all$Name_submitted)]
dat.all$accepted_name <- tnrs_all$Accepted_name[match(dat.all$species, tnrs_all$Name_submitted)]
write.csv(dat.all, 'data/dat.all.csv')
dat.all <- read.csv(dat.all, 'data/dat.all.csv')
dat.all <- read.csv('data/dat.all.csv')
dat.18 <- dat.all[which(dat.all$year == '2018'),]
spp07_cleaned <- sort(unique(dat.07$accepted_name)) # get unique sorted names from tnrs
spp18_cleaned <- sort(unique(dat.18$accepted_name)) # for each year/group
allspp_cleaned <- sort(unique(dat.all$accepted_name))
spp07_uncleaned <- sort(unique(dat.07$species)) # do the same for the uncleaned names
spp18_uncleaned <- sort(unique(dat.18$species))
allspp_uncleaned <- sort(unique(dat.all$species))
length(spp07_cleaned)   # 285 species reported in 2007
length(spp18_cleaned)   # 346 species reported in 2018
length(allspp_cleaned)  # 437 species between years
length(spp07_uncleaned)   # 318 species reported in 2007
length(spp18_uncleaned)   # 442 species reported in 2018
length(allspp_uncleaned)  # 598 species between years
#####################################################################################################
# CLEANED
both_07_and_18 <- sort(intersect(spp07_cleaned, spp18_cleaned))  # 194 species in both 2007 and 2018
in_07_not_18 <- sort(setdiff(spp07_cleaned, spp18_cleaned))  # 91 species found only in 2007
in_18_not_07 <- sort(setdiff(spp18_cleaned, spp07_cleaned))  # 152 species found only in 2018
both <- c()
only_07 <- c()
only_18 <- c()
whatschanged <- data.frame(allspp_cleaned)
for (sp in whatschanged$allspp){
ifelse(sp %in% both_07_and_18,
both <-c(both, 1), both <- c(both, 0))
ifelse(sp %in% in_07_not_18,
only_07 <- c(only_07, 1), only_07 <- c(only_07, 0))
ifelse(sp %in% in_18_not_07,
only_18 <- c(only_18, 1), only_18 <- c(only_18, 0))
}
whatschanged$both_07_and_18 <- both
whatschanged$only_in_07 <- only_07
whatschanged$only_in_18 <- only_18
spp_counts_07 <- data.frame(table(dat.07$accepted_name))
spp_counts_18 <- data.frame(table(dat.18$accepted_name))
whatschanged$freq_07  <- spp_counts_07$Freq[match(whatschanged$allspp_cleaned, spp_counts_07$Var1)]
whatschanged$freq_18  <- spp_counts_18$Freq[match(whatschanged$allspp_cleaned, spp_counts_18$Var1)]
write.csv(whatschanged, 'outputs/tnrs.spp_compare_years.csv')
#####################################################################################################
# UNCLEANED
both_07_and_18 <- sort(intersect(spp07_uncleaned, spp18_uncleaned))
in_07_not_18 <- sort(setdiff(spp07_uncleaned, spp18_uncleaned))
in_18_not_07 <- sort(setdiff(spp18_uncleaned, spp07_uncleaned))
both <- c()
only_07 <- c()
only_18 <- c()
whatschanged <- data.frame(allspp_uncleaned)
for (sp in whatschanged$allspp){
ifelse(sp %in% both_07_and_18,
both <-c(both, 1), both <- c(both, 0))
ifelse(sp %in% in_07_not_18,
only_07 <- c(only_07, 1), only_07 <- c(only_07, 0))
ifelse(sp %in% in_18_not_07,
only_18 <- c(only_18, 1), only_18 <- c(only_18, 0))
}
whatschanged$both_07_and_18 <- both
whatschanged$only_in_07 <- only_07
whatschanged$only_in_18 <- only_18
spp_counts_07 <- data.frame(table(dat.07$species))
spp_counts_18 <- data.frame(table(dat.18$species))
whatschanged$freq_07  <- spp_counts_07$Freq[match(whatschanged$allspp_uncleaned, spp_counts_07$Var1)]
whatschanged$freq_18  <- spp_counts_18$Freq[match(whatschanged$allspp_uncleaned, spp_counts_18$Var1)]
write.csv(whatschanged, 'outputs/uncleaned.spp_compare_years.csv')
######################################################################################################
# raw name  # cleaned name # num plots 2007 # num plots 2018
new_dat <- data.frame(allspp_uncleaned)
new_dat$cleaned_name <- tnrs_all$Accepted_name[match(allspp_uncleaned, tnrs_all$Name_submitted)]
num_plots_07 <- c()
for (spp in new_dat$allspp_uncleaned){
plots <- c()
plots <- c(plots, unique(dat.07$plot[which(dat.07$species == spp)]))
num_plots_07 <- c(num_plots_07, length(plots))
}
new_dat$num_plots_07 <- num_plots_07
num_plots_18 <- c()
for (spp in new_dat$allspp_uncleaned){
plots <- c()
plots <- c(plots, unique(dat.07$plot[which(dat.18$species == spp)]))
num_plots_18 <- c(num_plots_18, length(plots))
}
new_dat$num_plots_18 <- num_plots_18
# Raw name -- Cleaned name from TNRS -- 2007 total plots -- 2018 total plots
names(new_dat) <- c('Raw_name', 'Cleaned_name_from_TNRS', '2007_total_plots', '2018_total_plots')
write.csv(new_dat, 'outputs/plot_species_record.csv')
setwd('~/Documents/GitHub/east_woods_work/data/')
usda_spp_dat <- read.csv('species_data/usda_spp_info.csv')
native_id <- data.frame(usda_spp_dat[,c('Scientific.Name', 'Native.Status')])
names(native_id) <- c('Accepted_name', 'native')
native_id$native <- 'n'
invasive_tnrs <- read.csv('species_data/invasives_tnrs.csv')
invasive_tnrs$native <- 'i'
native_id <- rbind(native_id, invasive_tnrs[,c('Accepted_name', 'native')])
dat.all$nativestatus <- native_id$native[match(dat.all$accepted_name, native_id$Accepted_name)]
missing_natives <- unique(dat.all$accepted_name[which(is.na(dat.all$nativestatus))]) # I have this number trimmed down to 86!!
#############################################################################################
# manually go through list of 86 spp and get IDs for them --> Dr. Hipp did this part
# read back in the missing natives file
revised_missing_invasives <- read.csv('species_data/missing_natives - missing_natives.csv')[,2:3] # 11/4 7:32 PM is wondering what this file is??
names(revised_missing_invasives) <- c('Accepted_name', 'native')
# append the missing names/statuses to native_id
native_id <- rbind(native_id, revised_missing_invasives)
dat.all$nativestatus <- native_id$native[match(dat.all$accepted_name, native_id$Accepted_name)]
# run this again we should have all our species covered
write.csv(dat.all, 'outputs/dat.all.csv')
setwd('~/Documents/GitHub/east_woods_work/')
usda_spp_dat <- read.csv('data/species_data/usda_spp_info.csv')
native_id <- data.frame(usda_spp_dat[,c('Scientific.Name', 'Native.Status')])
names(native_id) <- c('Accepted_name', 'native')
native_id$native <- 'n'
invasive_tnrs <- read.csv('species_data/invasives_tnrs.csv')
invasive_tnrs$native <- 'i'
native_id <- rbind(native_id, invasive_tnrs[,c('Accepted_name', 'native')])
dat.all$nativestatus <- native_id$native[match(dat.all$accepted_name, native_id$Accepted_name)]
missing_natives <- unique(dat.all$accepted_name[which(is.na(dat.all$nativestatus))]) # I have this number trimmed down to 86!!
#############################################################################################
# manually go through list of 86 spp and get IDs for them --> Dr. Hipp did this part
# read back in the missing natives file
revised_missing_invasives <- read.csv('species_data/missing_natives - missing_natives.csv')[,2:3] # 11/4 7:32 PM is wondering what this file is??
names(revised_missing_invasives) <- c('Accepted_name', 'native')
# append the missing names/statuses to native_id
native_id <- rbind(native_id, revised_missing_invasives)
dat.all$nativestatus <- native_id$native[match(dat.all$accepted_name, native_id$Accepted_name)]
# run this again we should have all our species covered
write.csv(dat.all, 'outputs/dat.all.csv')
write.csv(dat.all, 'data/dat.all.csv')
dat.all <- read.csv('data/dat.all.csv')
spp_info <- unique(native_id)
spp_info$perennial_annual <- usda_spp_dat$Duration[match(spp_info$Accepted_name, usda_spp_dat$Scientific.Name)]
dat.all <- read.csv('data/dat.all.csv')
get_BA <- function(dat){
BA <- c() #calculate the basal area (just the area of the trunk)
for (c in dat$cover){
c <- c * 0.0328084 #converting the cm DBH into feet  (so the final area is in sq feet)
basal_area <- pi * (c/2)**2
BA <- c(BA, basal_area)
}
dat$cover <- BA # rewriting the cover column as BA so it works with the get_plot_cover function
return(dat)
}
get_plot_cover <- function(dat){
dat <- dat[which(!is.na(dat$cover)),]
dat <- dat[which(dat$cover != 0),]
total_cover <-
data.frame(
cov = sapply(unique(dat$plot), function(x){
sum(dat$cover[dat$plot == x], na.rm = T)
}
)
)
total_cover$cov <- as.numeric(as.character(total_cover$cov))
dat$plot_herb_cover <- total_cover$cov[match(dat$plot, row.names(total_cover))]
dat$spp_percent_total_herb_cover <- dat$cover/dat$plot_herb_cover
return(dat)
}
#-----------------------------------------------------------------------------------------------------------
# FUNCTION CALL
dat.all$cover <- as.numeric(dat.all$cover)
dat.07 <- dat.all[which(dat.all$year == '2007'),]
dat.18 <- dat.all[which(dat.all$year == '2018'),]
herbs07 <- dat.07[which(dat.07$datset == 'H'),]
herbs18 <- dat.18[which(dat.18$datset == 'H'),]
shrubs07 <- dat.07[which(dat.07$datset == 'S'),]
shrubs18 <- dat.18[which(dat.18$datset == 'S'),]
trees07 <- dat.07[which(dat.07$datset == 'T'),]
trees18 <- dat.18[which(dat.18$datset == 'T'),]
invasives07 <- dat.07[which(dat.07$nativestatus == 'i'),]
invasives07 <- rbind(invasives07, dat.07[which(dat.07$nativestatus == 'x'),])
invasives18 <- dat.18[which(dat.18$nativestatus == 'i'),]
invasives18 <- rbind(invasives18, dat.18[which(dat.18$nativestatus == 'x'),])
herbs07 <- get_plot_cover(herbs07)
herbs18 <- get_plot_cover(herbs18)
shrubs07 <- get_plot_cover(shrubs07)
shrubs18 <- get_plot_cover(shrubs18)
trees07 <- get_BA(trees07)
trees07 <- get_plot_cover(trees07)
trees18 <- get_BA(trees18)
trees18 <- get_plot_cover(trees18)
invasives07 <- get_plot_cover(invasives07)
invasives18 <- get_plot_cover(invasives18)
dat.all <- read.csv('data/dat.all.csv')
dat.all$cover <- as.numeric(dat.all$cover)
dat.07 <- dat.all[which(dat.all$year == '2007'),]
get_BA <- function(dat){
BA <- c() #calculate the basal area (just the area of the trunk)
for (c in dat$cover){
c <- c * 0.0328084 #converting the cm DBH into feet  (so the final area is in sq feet)
basal_area <- pi * (c/2)**2
BA <- c(BA, basal_area)
}
dat$cover <- BA # rewriting the cover column as BA so it works with the get_plot_cover function
return(dat)
}
get_plot_cover <- function(dat){
dat <- dat[which(!is.na(dat$cover)),]
dat <- dat[which(dat$cover != 0),]
total_cover <-
data.frame(
cov = sapply(unique(dat$plot), function(x){
sum(dat$cover[dat$plot == x], na.rm = T)
}
)
)
total_cover$cov <- as.numeric(as.character(total_cover$cov))
dat$plot_herb_cover <- total_cover$cov[match(dat$plot, row.names(total_cover))]
dat$spp_percent_total_herb_cover <- dat$cover/dat$plot_herb_cover
return(dat)
}
dat.18 <- dat.all[which(dat.all$year == '2018'),]
View(dat.07)
View(dat.18)
View(dat.all)
source('~/Documents/GitHub/east_woods_work/scripts/01.combine_spp_pools.R')
source('~/Documents/GitHub/east_woods_work/scripts/01.combine_spp_pools.R')
setwd('~/Documents/GitHub/east_woods_work/')
dat.all <- read.csv('outputs/dat.all.csv')
library(magrittr)
dat.all.sorted <- sapply(dat.all$species, function(x) x) %>%
unlist %>%
trimws %>%
unique %>%
sort
dat.all.sorted <- data.frame(dat.all.sorted)
write.csv(dat.all.sorted, 'outputs/complete_spp_list.csv')
#take these species lists and run through http://tnrs.iplantcollaborative.org/TNRSapp.html
#TNRS OUTPUT: complete_tnrs_list.csv
###################################################################################################
# make the translation key with original species name in one column and
# accepted species name in another
# LAST UPDATED TRANSLATION KEY: 11/3
tnrs_all <- data.frame(read.csv('outputs/complete_tnrs_list.csv', as.is = T))
###################################################################################################
#append the accepted name to each of the spp pool dataframes
dat.all$accepted_name <- tnrs_all$Accepted_name[match(dat.all$species, tnrs_all$Name_submitted)]
write.csv(dat.all, 'data/dat.all.csv', row.names = F)
write.csv(dat.all, '../dat.all.csv', row.names = F, quote = F)
write.csv(dat.all, 'data/dat.all.csv', row.names = F, quote = F)
source('~/Documents/GitHub/east_woods_work/scripts/01.combine_spp_pools.R')
source('~/Documents/GitHub/east_woods_work/scripts/01.combine_spp_pools.R')
source('~/Documents/GitHub/east_woods_work/scripts/02.falltranslationkey.R')
source('~/Documents/GitHub/east_woods_work/scripts/02.falltranslationkey.R')
source('~/Documents/GitHub/east_woods_work/scripts/03.compare_years.R')
setwd('~/Documents/GitHub/east_woods_work/')
usda_spp_dat <- read.csv('data/species_data/usda_spp_info.csv')
native_id <- data.frame(usda_spp_dat[,c('Scientific.Name', 'Native.Status')])
names(native_id) <- c('Accepted_name', 'native')
native_id$native <- 'n'
invasive_tnrs <- read.csv('species_data/invasives_tnrs.csv')
invasive_tnrs$native <- 'i'
native_id <- rbind(native_id, invasive_tnrs[,c('Accepted_name', 'native')])
dat.all$nativestatus <- native_id$native[match(dat.all$accepted_name, native_id$Accepted_name)] # broooo need to re run the translation key with the new data from summer!! 12/6
missing_natives <- unique(dat.all$accepted_name[which(is.na(dat.all$nativestatus))]) # I have this number trimmed down to 86!!
#############################################################################################
# manually go through list of 86 spp and get IDs for them --> Dr. Hipp did this part
# read back in the missing natives file
revised_missing_invasives <- read.csv('species_data/missing_natives - missing_natives.csv')[,2:3] # 11/4 7:32 PM is wondering what this file is??
names(revised_missing_invasives) <- c('Accepted_name', 'native')
# append the missing names/statuses to native_id
native_id <- rbind(native_id, revised_missing_invasives)
dat.all$nativestatus <- native_id$native[match(dat.all$accepted_name, native_id$Accepted_name)]
# run this again we should have all our species covered
write.csv(dat.all, 'data/dat.all.csv', row.names = F, quote = F)
rm(list = ls())
source('~/Documents/GitHub/east_woods_work/scripts/04.natives.R')
source('~/Documents/GitHub/east_woods_work/scripts/04.natives.R')
source('~/Documents/GitHub/east_woods_work/scripts/04.natives.R')
dat.all <- read.csv('data/dat.all.csv')
#-----------------------------------------------------------------------------------------------------------
# FUNCTIONS
get_BA <- function(dat){
BA <- c() #calculate the basal area (just the area of the trunk)
for (c in dat$cover){
c <- c * 0.0328084 #converting the cm DBH into feet  (so the final area is in sq feet)
basal_area <- pi * (c/2)**2
BA <- c(BA, basal_area)
}
dat$cover <- BA # rewriting the cover column as BA so it works with the get_plot_cover function
return(dat)
}
get_plot_cover <- function(dat){
dat <- dat[which(!is.na(dat$cover)),]
dat <- dat[which(dat$cover != 0),]
total_cover <-
data.frame(
cov = sapply(unique(dat$plot), function(x){
sum(dat$cover[dat$plot == x], na.rm = T)
}
)
)
total_cover$cov <- as.numeric(as.character(total_cover$cov))
dat$plot_herb_cover <- total_cover$cov[match(dat$plot, row.names(total_cover))]
dat$spp_percent_total_herb_cover <- dat$cover/dat$plot_herb_cover
return(dat)
}
#-----------------------------------------------------------------------------------------------------------
# FUNCTION CALL
dat.all$cover <- as.numeric(dat.all$cover)
dat.07 <- dat.all[which(dat.all$year == '2007'),]
dat.18 <- dat.all[which(dat.all$year == '2018'),]
get_BA <- function(dat){
for (c in dat$cover[which(dat$datset == 'T')]){
c2 <- c * 0.0328084 #converting the cm DBH into feet  (so the final area is in sq feet)
basal_area <- pi * (c2/2)**2
dat[c,'cover'] <- basal_area
}
return(dat)
}
test <- get_BA(dat.07)
View(test)
c2 <- 4*0.0328084
basal_area <- pi * (c2/2)**2
basal_area
dat.07[4,'cover']
test <- get_BA(dat.07)
